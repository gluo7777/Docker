version: "3"
services:
  # Run 5 instances of that image as a service called web, 
  # limiting each one to use, at most, 10% of a single core of 
  # CPU time (this could also be e.g. “1.5” to mean 1 and half core for each), and 50MB of RAM.
  web:
    # replace username/repo:tag with your name and image details
    image: willdocker9821/pyapp9821
    deploy:
      replicas: 6
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      # Immediately restart containers if one fails.
      restart_policy:
        condition: on-failure
    ports:
      - "4000:80"
    # Instruct web’s containers to share port 80 via a load-balanced network called webnet. 
    # (Internally, the containers themselves publish to web’s port 80 at an ephemeral port.)
    networks:
      - webnet
  # add a free visualizer service that lets us look at how our swarm is scheduling containers.
  # this container, built from an open source project created by Docker, displays Docker services running on a swarm in a diagram.
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    # giving the visualizer access to the host’s socket file for Docker
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        # ensuring that this service only ever runs on a swarm manager -- never a worker.
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet: